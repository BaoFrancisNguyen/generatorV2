#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SERVICE G√âN√âRATEUR DE DONN√âES √âNERG√âTIQUES - MALAYSIA
Fichier: app/services/data_generator.py

Service principal pour la g√©n√©ration de donn√©es synth√©tiques de consommation √©lectrique
sp√©cialement adapt√©es au contexte malaysien. G√®re les patterns climatiques tropicaux,
les sp√©cificit√©s culturelles et les coordonn√©es g√©ographiques pr√©cises.

Auteur: √âquipe D√©veloppement
Date: 2025
Version: 3.0 - Service modulaire
"""

import logging
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
import numpy as np
import pandas as pd
from faker import Faker

from app.utils.malaysia_data import MalaysiaLocationData
from app.utils.energy_patterns import EnergyPatternGenerator
from app.models.building import Building
from app.models.location import Location
from app.models.timeseries import TimeSeries


class ElectricityDataGenerator:
    """
    G√©n√©rateur principal de donn√©es √©nerg√©tiques pour la Malaysia.
    
    Ce service g√©n√®re des donn√©es synth√©tiques r√©alistes en tenant compte:
    - Des patterns climatiques tropicaux
    - Des habitudes de consommation malaysiennes
    - De la distribution g√©ographique des villes
    - Des types de b√¢timents et leur usage
    """
    
    def __init__(self, config=None):
        """
        Initialise le g√©n√©rateur avec la configuration fournie.
        
        Args:
            config: Configuration de l'application (optionnel)
        """
        self.logger = logging.getLogger(__name__)
        self.config = config
        
        # ‚úÖ CORRECTION: Utiliser des locales support√©s par Faker
        # en_US pour l'anglais et id_ID pour l'indon√©sien (proche du malaysien)
        try:
            self.faker = Faker(['en_US', 'id_ID'])  # Locales support√©s
        except AttributeError:
            # Fallback si id_ID n'est pas disponible
            self.faker = Faker(['en_US'])
            self.logger.warning("‚ö†Ô∏è Locale id_ID non disponible, utilisation de en_US uniquement")
        
        # Initialiser les donn√©es de base
        self.malaysia_data = MalaysiaLocationData()
        self.pattern_generator = EnergyPatternGenerator()
        
        # Cache pour optimiser les performances
        self._location_cache = {}
        self._building_cache = {}
        
        self.logger.info("‚úÖ G√©n√©rateur de donn√©es √©nerg√©tiques Malaysia initialis√©")
    
    def generate_complete_dataset(self, 
                                num_buildings: int = 100,
                                start_date: str = '2024-01-01',
                                end_date: str = '2024-01-31',
                                frequency: str = 'D',
                                location_filter: Optional[Dict] = None,
                                building_types: Optional[List[str]] = None) -> Dict[str, pd.DataFrame]:
        """
        G√©n√®re un dataset complet avec m√©tadonn√©es des b√¢timents et s√©ries temporelles.
        
        Args:
            num_buildings: Nombre de b√¢timents √† g√©n√©rer
            start_date: Date de d√©but (format YYYY-MM-DD)
            end_date: Date de fin (format YYYY-MM-DD)
            frequency: Fr√©quence des donn√©es ('H', 'D', '30T', etc.)
            location_filter: Filtre pour les localisations (ville, √©tat, r√©gion)
            building_types: Types de b√¢timents √† inclure
            
        Returns:
            Dict contenant les DataFrames 'buildings' et 'timeseries'
        """
        self.logger.info(f"üèóÔ∏è G√©n√©ration de {num_buildings} b√¢timents du {start_date} au {end_date}")
        
        try:
            # Validation des param√®tres
            self._validate_generation_parameters(num_buildings, start_date, end_date, frequency)
            
            # G√©n√©ration des m√©tadonn√©es des b√¢timents
            buildings_df = self.generate_building_metadata(
                num_buildings=num_buildings,
                location_filter=location_filter,
                building_types=building_types
            )
            
            # G√©n√©ration des s√©ries temporelles
            timeseries_df = self.generate_timeseries_data(
                buildings_df=buildings_df,
                start_date=start_date,
                end_date=end_date,
                frequency=frequency
            )
            
            self.logger.info(f"‚úÖ Dataset g√©n√©r√©: {len(buildings_df)} b√¢timents, {len(timeseries_df)} observations")
            
            return {
                'buildings': buildings_df,
                'timeseries': timeseries_df,
                'metadata': self._generate_dataset_metadata(buildings_df, timeseries_df, start_date, end_date, frequency)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la g√©n√©ration: {str(e)}")
            raise
    
    def generate_building_metadata(self, 
                                 num_buildings: int,
                                 location_filter: Optional[Dict] = None,
                                 building_types: Optional[List[str]] = None) -> pd.DataFrame:
        """
        G√©n√®re les m√©tadonn√©es des b√¢timents (localisation, type, caract√©ristiques).
        
        Args:
            num_buildings: Nombre de b√¢timents √† g√©n√©rer
            location_filter: Filtre pour les localisations
            building_types: Types de b√¢timents autoris√©s
            
        Returns:
            DataFrame avec les m√©tadonn√©es des b√¢timents
        """
        self.logger.debug(f"üìã G√©n√©ration des m√©tadonn√©es pour {num_buildings} b√¢timents")
        
        buildings_data = []
        
        for i in range(num_buildings):
            # S√©lectionner une localisation
            location = self._select_location(location_filter)
            
            # S√©lectionner un type de b√¢timent
            building_type = self._select_building_type(location, building_types)
            
            # G√©n√©rer les caract√©ristiques du b√¢timent
            characteristics = self._generate_building_characteristics(building_type, location)
            
            # Cr√©er l'instance Building
            building = Building(
                unique_id=self._generate_unique_id(),
                building_id=self._generate_building_id(location, i),
                location=location,
                building_type=building_type,
                characteristics=characteristics,
                osm_source=False,
                validation_status='valid'
            )
            
            # Convertir en dictionnaire pour le DataFrame
            buildings_data.append(building.to_dict())
        
        buildings_df = pd.DataFrame(buildings_data)
        self.logger.debug(f"‚úÖ M√©tadonn√©es g√©n√©r√©es: {len(buildings_df)} b√¢timents")
        
        return buildings_df
    
    def generate_timeseries_data(self,
                               buildings_df: pd.DataFrame,
                               start_date: str,
                               end_date: str,
                               frequency: str = 'D') -> pd.DataFrame:
        """
        G√©n√®re les s√©ries temporelles de consommation √©lectrique.
        
        Args:
            buildings_df: DataFrame des b√¢timents
            start_date: Date de d√©but
            end_date: Date de fin
            frequency: Fr√©quence des donn√©es
            
        Returns:
            DataFrame des s√©ries temporelles
        """
        self.logger.debug(f"‚è∞ G√©n√©ration des s√©ries temporelles en fr√©quence {frequency}")
        
        # Cr√©er la plage temporelle
        date_range = pd.date_range(start=start_date, end=end_date, freq=frequency)
        
        timeseries_data = []
        
        for _, building in buildings_df.iterrows():
            # G√©n√©rer les patterns de consommation pour ce b√¢timent
            building_timeseries = self.pattern_generator.generate_consumption_pattern(
                building_type=building['building_class'],
                date_range=date_range,
                location_data=building,
                characteristics=building.get('characteristics', {})
            )
            
            # Convertir en observations TimeSeries
            for timestamp, consumption in building_timeseries.items():
                observation = TimeSeries(
                    unique_id=building['unique_id'],
                    timestamp=timestamp,
                    consumption_kwh=consumption,
                    quality_score=np.random.uniform(95, 100),  # Haute qualit√© pour donn√©es synth√©tiques
                    anomaly_flag=False,
                    validation_status='valid'
                )
                
                timeseries_data.append(observation.to_dict())
        
        timeseries_df = pd.DataFrame(timeseries_data)
        self.logger.debug(f"‚úÖ S√©ries temporelles g√©n√©r√©es: {len(timeseries_df)} observations")
        
        return timeseries_df
    
    def _validate_generation_parameters(self, num_buildings: int, start_date: str, 
                                      end_date: str, frequency: str):
        """
        Valide les param√®tres de g√©n√©ration.
        
        Args:
            num_buildings: Nombre de b√¢timents
            start_date: Date de d√©but
            end_date: Date de fin
            frequency: Fr√©quence
            
        Raises:
            ValueError: Si les param√®tres sont invalides
        """
        # Validation du nombre de b√¢timents
        if num_buildings <= 0:
            raise ValueError("Le nombre de b√¢timents doit √™tre positif")
        
        if self.config and num_buildings > self.config.MAX_BUILDINGS:
            raise ValueError(f"Nombre maximum de b√¢timents: {self.config.MAX_BUILDINGS}")
        
        # Validation des dates
        try:
            start_dt = datetime.strptime(start_date, '%Y-%m-%d')
            end_dt = datetime.strptime(end_date, '%Y-%m-%d')
        except ValueError:
            raise ValueError("Format de date invalide. Utilisez YYYY-MM-DD")
        
        if start_dt >= end_dt:
            raise ValueError("La date de fin doit √™tre apr√®s la date de d√©but")
        
        # Valider la p√©riode
        period_days = (end_dt - start_dt).days
        if self.config and hasattr(self.config, 'MAX_PERIOD_DAYS') and period_days > self.config.MAX_PERIOD_DAYS:
            raise ValueError(f"P√©riode maximum: {self.config.MAX_PERIOD_DAYS} jours")
        
        # Valider la fr√©quence
        if self.config and hasattr(self.config, 'SUPPORTED_FREQUENCIES') and frequency not in self.config.SUPPORTED_FREQUENCIES:
            raise ValueError(f"Fr√©quences support√©es: {self.config.SUPPORTED_FREQUENCIES}")
    
    def _select_location(self, location_filter: Optional[Dict] = None) -> Location:
        """
        S√©lectionne une localisation selon les filtres donn√©s.
        
        Args:
            location_filter: Crit√®res de filtrage
            
        Returns:
            Instance Location
        """
        # Obtenir les localisations disponibles
        available_locations = self.malaysia_data.get_available_locations()
        
        # Appliquer les filtres si fournis
        if location_filter:
            available_locations = self.malaysia_data.filter_locations(
                available_locations, 
                location_filter
            )
        
        # S√©lectionner al√©atoirement avec pond√©ration par population
        location_data = self.malaysia_data.select_weighted_location(available_locations)
        
        # Cr√©er une instance Location
        from app.models.location import create_location_from_dict
        return create_location_from_dict(location_data)
    
    def _select_building_type(self, location: Location, building_types: Optional[List[str]] = None) -> str:
        """
        S√©lectionne un type de b√¢timent appropri√© pour la localisation.
        
        Args:
            location: Localisation du b√¢timent
            building_types: Types autoris√©s (optionnel)
            
        Returns:
            Type de b√¢timent s√©lectionn√©
        """
        # Obtenir la distribution des types selon la localisation
        location_dict = location.to_dict() if hasattr(location, 'to_dict') else location.__dict__
        type_distribution = self.malaysia_data.get_building_type_distribution(location_dict)
        
        # Filtrer selon les types autoris√©s
        if building_types:
            type_distribution = {
                k: v for k, v in type_distribution.items() 
                if k in building_types
            }
        
        # S√©lection pond√©r√©e
        if not type_distribution:
            return 'residential'  # Fallback
            
        types = list(type_distribution.keys())
        weights = list(type_distribution.values())
        
        return np.random.choice(types, p=weights)
    
    def _generate_building_characteristics(self, building_type: str, location: Location) -> Dict:
        """
        G√©n√®re les caract√©ristiques sp√©cifiques d'un b√¢timent.
        
        Args:
            building_type: Type du b√¢timent
            location: Localisation
            
        Returns:
            Dictionnaire des caract√©ristiques
        """
        characteristics = {
            'building_type': building_type,
            'construction_year': np.random.randint(1980, 2024),
            'floor_area_sqm': self._generate_floor_area(building_type),
            'floors': self._generate_floor_count(building_type),
            'ac_installed': np.random.choice([True, False], p=[0.8, 0.2]),  # 80% ont la climatisation en Malaysia
            'energy_efficiency': np.random.choice(['A', 'B', 'C', 'D'], p=[0.2, 0.3, 0.4, 0.1])
        }
        
        # Ajustements selon le type de b√¢timent
        if building_type == 'residential':
            characteristics.update({
                'occupants': np.random.randint(1, 6),
                'apartment_type': np.random.choice(['condo', 'terrace', 'semi-d', 'bungalow'], 
                                                 p=[0.4, 0.3, 0.2, 0.1])
            })
        elif building_type == 'commercial':
            characteristics.update({
                'business_type': np.random.choice(['office', 'retail', 'restaurant', 'hotel'], 
                                                p=[0.4, 0.3, 0.2, 0.1]),
                'employees': np.random.randint(5, 200)
            })
        elif building_type == 'industrial':
            characteristics.update({
                'industry_type': np.random.choice(['manufacturing', 'warehouse', 'processing'], 
                                                p=[0.5, 0.3, 0.2]),
                'machinery_count': np.random.randint(10, 100)
            })
        
        return characteristics
    
    def _generate_floor_area(self, building_type: str) -> float:
        """G√©n√®re une superficie r√©aliste selon le type de b√¢timent."""
        area_ranges = {
            'residential': (50, 300),
            'commercial': (100, 2000),
            'industrial': (500, 5000),
            'public': (200, 1500)
        }
        
        min_area, max_area = area_ranges.get(building_type, (100, 500))
        return round(np.random.uniform(min_area, max_area), 1)
    
    def _generate_floor_count(self, building_type: str) -> int:
        """G√©n√®re un nombre d'√©tages r√©aliste selon le type de b√¢timent."""
        floor_ranges = {
            'residential': (1, 3),
            'commercial': (1, 20),
            'industrial': (1, 4),
            'public': (1, 10)
        }
        
        min_floors, max_floors = floor_ranges.get(building_type, (1, 3))
        return np.random.randint(min_floors, max_floors + 1)
    
    def _generate_unique_id(self) -> str:
        """
        G√©n√®re un identifiant unique de 16 caract√®res.
        
        Returns:
            Identifiant unique
        """
        return uuid.uuid4().hex[:16]
    
    def _generate_building_id(self, location: Location, index: int) -> str:
        """
        G√©n√®re un ID de b√¢timent avec code g√©ographique.
        
        Args:
            location: Localisation
            index: Index du b√¢timent
            
        Returns:
            ID format√© (ex: MY_KUL_000123)
        """
        state_code = getattr(location, 'state_code', 'UNK')
        return f"MY_{state_code}_{index:06d}"
    
    def _generate_dataset_metadata(self, 
                                 buildings_df: pd.DataFrame,
                                 timeseries_df: pd.DataFrame,
                                 start_date: str,
                                 end_date: str,
                                 frequency: str) -> Dict:
        """
        G√©n√®re les m√©tadonn√©es du dataset g√©n√©r√©.
        
        Returns:
            Dictionnaire des m√©tadonn√©es
        """
        return {
            'dataset_name': 'malaysia_electricity_v3',
            'generation_timestamp': datetime.now().isoformat(),
            'generator_version': '3.0',
            'total_buildings': len(buildings_df),
            'total_observations': len(timeseries_df),
            'period': {
                'start_date': start_date,
                'end_date': end_date,
                'frequency': frequency,
                'total_days': (datetime.strptime(end_date, '%Y-%m-%d') - 
                              datetime.strptime(start_date, '%Y-%m-%d')).days
            },
            'geographic_coverage': {
                'country': 'Malaysia',
                'cities_included': buildings_df['location'].unique().tolist() if 'location' in buildings_df.columns else [],
                'states_included': buildings_df['state'].unique().tolist() if 'state' in buildings_df.columns else []
            },
            'building_distribution': buildings_df['building_class'].value_counts().to_dict() if 'building_class' in buildings_df.columns else {},
            'data_quality': {
                'completeness': 100.0,
                'null_values': 0,
                'outliers_detected': 0
            }
        }
    
    def get_generation_statistics(self) -> Dict:
        """
        Retourne les statistiques du g√©n√©rateur.
        
        Returns:
            Dictionnaire des statistiques
        """
        return {
            'total_locations': len(self.malaysia_data.get_available_locations()),
            'supported_building_types': self.malaysia_data.get_building_types(),
            'cache_size': {
                'locations': len(self._location_cache),
                'buildings': len(self._building_cache)
            },
            'configuration': {
                'timezone': 'Asia/Kuala_Lumpur',
                'currency': 'MYR',
                'energy_unit': 'kWh'
            },
            'faker_locales': ['en_US', 'id_ID']  # Locales utilis√©s
        }


# Export de la classe principale
__all__ = ['ElectricityDataGenerator']