#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SERVICE G√âN√âRATEUR DE DONN√âES √âNERG√âTIQUES - MALAYSIA
Fichier: app/services/data_generator.py

Service principal pour la g√©n√©ration de donn√©es synth√©tiques de consommation √©lectrique
sp√©cialement adapt√©es au contexte malaysien. G√®re les patterns climatiques tropicaux,
les sp√©cificit√©s culturelles et les coordonn√©es g√©ographiques pr√©cises.

Auteur: √âquipe D√©veloppement
Date: 2025
Version: 3.0 - Service modulaire
"""

import logging
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
import numpy as np
import pandas as pd
from faker import Faker

from app.utils.malaysia_data import MalaysiaLocationData
from app.utils.energy_patterns import EnergyPatternGenerator
from app.models.building import Building
from app.models.location import Location
from app.models.timeseries import TimeSeries


class ElectricityDataGenerator:
    """
    G√©n√©rateur principal de donn√©es √©nerg√©tiques pour la Malaysia.
    
    Ce service g√©n√®re des donn√©es synth√©tiques r√©alistes en tenant compte:
    - Des patterns climatiques tropicaux
    - Des habitudes de consommation malaysiennes
    - De la distribution g√©ographique des villes
    - Des types de b√¢timents et leur usage
    """
    
    def __init__(self, config=None):
        """
        Initialise le g√©n√©rateur avec la configuration fournie.
        
        Args:
            config: Configuration de l'application (optionnel)
        """
        self.logger = logging.getLogger(__name__)
        self.config = config
        self.faker = Faker(['en_MY', 'ms_MY'])  # Locale Malaysia
        
        # Initialiser les donn√©es de base
        self.malaysia_data = MalaysiaLocationData()
        self.pattern_generator = EnergyPatternGenerator()
        
        # Cache pour optimiser les performances
        self._location_cache = {}
        self._building_cache = {}
        
        self.logger.info("‚úÖ G√©n√©rateur de donn√©es √©nerg√©tiques Malaysia initialis√©")
    
    def generate_complete_dataset(self, 
                                num_buildings: int = 100,
                                start_date: str = '2024-01-01',
                                end_date: str = '2024-01-31',
                                frequency: str = 'D',
                                location_filter: Optional[Dict] = None,
                                building_types: Optional[List[str]] = None) -> Dict[str, pd.DataFrame]:
        """
        G√©n√®re un dataset complet avec m√©tadonn√©es des b√¢timents et s√©ries temporelles.
        
        Args:
            num_buildings: Nombre de b√¢timents √† g√©n√©rer
            start_date: Date de d√©but (format YYYY-MM-DD)
            end_date: Date de fin (format YYYY-MM-DD)
            frequency: Fr√©quence des donn√©es ('H', 'D', '30T', etc.)
            location_filter: Filtre pour les localisations (ville, √©tat, r√©gion)
            building_types: Types de b√¢timents √† inclure
            
        Returns:
            Dict contenant les DataFrames 'buildings' et 'timeseries'
        """
        self.logger.info(f"üèóÔ∏è G√©n√©ration de {num_buildings} b√¢timents du {start_date} au {end_date}")
        
        try:
            # Validation des param√®tres
            self._validate_generation_parameters(num_buildings, start_date, end_date, frequency)
            
            # G√©n√©ration des m√©tadonn√©es des b√¢timents
            buildings_df = self.generate_building_metadata(
                num_buildings=num_buildings,
                location_filter=location_filter,
                building_types=building_types
            )
            
            # G√©n√©ration des s√©ries temporelles
            timeseries_df = self.generate_timeseries_data(
                buildings_df=buildings_df,
                start_date=start_date,
                end_date=end_date,
                frequency=frequency
            )
            
            self.logger.info(f"‚úÖ Dataset g√©n√©r√©: {len(buildings_df)} b√¢timents, {len(timeseries_df)} observations")
            
            return {
                'buildings': buildings_df,
                'timeseries': timeseries_df,
                'metadata': self._generate_dataset_metadata(buildings_df, timeseries_df, start_date, end_date, frequency)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la g√©n√©ration: {str(e)}")
            raise
    
    def generate_building_metadata(self, 
                                 num_buildings: int,
                                 location_filter: Optional[Dict] = None,
                                 building_types: Optional[List[str]] = None) -> pd.DataFrame:
        """
        G√©n√®re les m√©tadonn√©es des b√¢timents (localisation, type, caract√©ristiques).
        
        Args:
            num_buildings: Nombre de b√¢timents √† g√©n√©rer
            location_filter: Filtre g√©ographique
            building_types: Types de b√¢timents souhait√©s
            
        Returns:
            DataFrame avec les m√©tadonn√©es des b√¢timents
        """
        self.logger.info(f"üìä G√©n√©ration des m√©tadonn√©es pour {num_buildings} b√¢timents")
        
        buildings = []
        
        for i in range(num_buildings):
            # S√©lectionner une localisation
            location = self._select_location(location_filter)
            
            # S√©lectionner un type de b√¢timent
            building_type = self._select_building_type(location, building_types)
            
            # G√©n√©rer un identifiant unique
            unique_id = self._generate_unique_id()
            building_id = self._generate_building_id(location, i)
            
            # Cr√©er le b√¢timent
            building = Building(
                unique_id=unique_id,
                building_id=building_id,
                location=location,
                building_type=building_type,
                characteristics=self._generate_building_characteristics(building_type, location)
            )
            
            buildings.append(building.to_dict())
        
        df = pd.DataFrame(buildings)
        self.logger.info(f"‚úÖ {len(df)} b√¢timents g√©n√©r√©s avec m√©tadonn√©es compl√®tes")
        
        return df
    
    def generate_timeseries_data(self,
                               buildings_df: pd.DataFrame,
                               start_date: str,
                               end_date: str,
                               frequency: str = 'D') -> pd.DataFrame:
        """
        G√©n√®re les s√©ries temporelles de consommation √©lectrique.
        
        Args:
            buildings_df: DataFrame des b√¢timents
            start_date: Date de d√©but
            end_date: Date de fin
            frequency: Fr√©quence des donn√©es
            
        Returns:
            DataFrame avec les s√©ries temporelles
        """
        self.logger.info(f"‚è∞ G√©n√©ration des s√©ries temporelles {frequency} du {start_date} au {end_date}")
        
        # Cr√©er l'index temporel
        date_range = pd.date_range(
            start=start_date,
            end=end_date,
            freq=frequency,
            tz='Asia/Kuala_Lumpur'
        )
        
        all_timeseries = []
        
        for _, building in buildings_df.iterrows():
            # G√©n√©rer la s√©rie temporelle pour ce b√¢timent
            consumption_data = self._generate_building_consumption(
                building=building,
                date_range=date_range,
                frequency=frequency
            )
            
            # Cr√©er les enregistrements de s√©rie temporelle
            for timestamp, consumption in zip(date_range, consumption_data):
                timeseries_record = TimeSeries(
                    unique_id=building['unique_id'],
                    timestamp=timestamp,
                    consumption_kwh=consumption
                )
                all_timeseries.append(timeseries_record.to_dict())
        
        df = pd.DataFrame(all_timeseries)
        self.logger.info(f"‚úÖ {len(df)} observations de consommation g√©n√©r√©es")
        
        return df
    
    def _validate_generation_parameters(self, num_buildings, start_date, end_date, frequency):
        """
        Valide les param√®tres de g√©n√©ration.
        
        Args:
            num_buildings: Nombre de b√¢timents
            start_date: Date de d√©but
            end_date: Date de fin
            frequency: Fr√©quence
            
        Raises:
            ValueError: Si les param√®tres sont invalides
        """
        # Valider le nombre de b√¢timents
        if not isinstance(num_buildings, int) or num_buildings < 1:
            raise ValueError("Le nombre de b√¢timents doit √™tre un entier positif")
        
        if self.config:
            if num_buildings > self.config.MAX_BUILDINGS:
                raise ValueError(f"Nombre maximum de b√¢timents: {self.config.MAX_BUILDINGS}")
        
        # Valider les dates
        try:
            start_dt = datetime.strptime(start_date, '%Y-%m-%d')
            end_dt = datetime.strptime(end_date, '%Y-%m-%d')
        except ValueError:
            raise ValueError("Format de date invalide. Utilisez YYYY-MM-DD")
        
        if start_dt >= end_dt:
            raise ValueError("La date de fin doit √™tre apr√®s la date de d√©but")
        
        # Valider la p√©riode
        period_days = (end_dt - start_dt).days
        if self.config and period_days > self.config.MAX_PERIOD_DAYS:
            raise ValueError(f"P√©riode maximum: {self.config.MAX_PERIOD_DAYS} jours")
        
        # Valider la fr√©quence
        if self.config and frequency not in self.config.SUPPORTED_FREQUENCIES:
            raise ValueError(f"Fr√©quences support√©es: {self.config.SUPPORTED_FREQUENCIES}")
    
    def _select_location(self, location_filter: Optional[Dict] = None) -> Location:
        """
        S√©lectionne une localisation selon les filtres donn√©s.
        
        Args:
            location_filter: Crit√®res de filtrage
            
        Returns:
            Instance Location
        """
        # Obtenir les localisations disponibles
        available_locations = self.malaysia_data.get_available_locations()
        
        # Appliquer les filtres si fournis
        if location_filter:
            available_locations = self.malaysia_data.filter_locations(
                available_locations, 
                location_filter
            )
        
        # S√©lectionner al√©atoirement avec pond√©ration par population
        location_data = self.malaysia_data.select_weighted_location(available_locations)
        
        return Location.from_dict(location_data)
    
    def _select_building_type(self, location: Location, building_types: Optional[List[str]] = None) -> str:
        """
        S√©lectionne un type de b√¢timent appropri√© pour la localisation.
        
        Args:
            location: Localisation du b√¢timent
            building_types: Types autoris√©s (optionnel)
            
        Returns:
            Type de b√¢timent s√©lectionn√©
        """
        # Obtenir la distribution des types selon la localisation
        type_distribution = self.malaysia_data.get_building_type_distribution(location)
        
        # Filtrer selon les types autoris√©s
        if building_types:
            type_distribution = {
                k: v for k, v in type_distribution.items() 
                if k in building_types
            }
        
        # S√©lection pond√©r√©e
        types = list(type_distribution.keys())
        weights = list(type_distribution.values())
        
        return np.random.choice(types, p=weights)
    
    def _generate_building_characteristics(self, building_type: str, location: Location) -> Dict:
        """
        G√©n√®re les caract√©ristiques sp√©cifiques d'un b√¢timent.
        
        Args:
            building_type: Type du b√¢timent
            location: Localisation
            
        Returns:
            Dictionnaire des caract√©ristiques
        """
        base_characteristics = {
            'building_type': building_type,
            'location_type': location.type,
            'climate_zone': location.climate_zone
        }
        
        # Caract√©ristiques selon le type de b√¢timent
        if building_type == 'residential':
            base_characteristics.update({
                'num_units': np.random.randint(1, 20),
                'avg_occupancy': np.random.uniform(2.5, 4.5),
                'has_ac': np.random.choice([True, False], p=[0.8, 0.2]),
                'building_age': np.random.randint(1, 50)
            })
        
        elif building_type == 'commercial':
            base_characteristics.update({
                'floor_area_sqm': np.random.randint(100, 2000),
                'business_type': np.random.choice(['retail', 'office', 'restaurant', 'mall']),
                'operating_hours': np.random.randint(8, 16),
                'cooling_intensity': np.random.uniform(0.7, 1.0)
            })
        
        elif building_type == 'industrial':
            base_characteristics.update({
                'industry_type': np.random.choice(['manufacturing', 'processing', 'warehouse']),
                'shift_pattern': np.random.choice(['1-shift', '2-shift', '3-shift']),
                'energy_intensity': np.random.uniform(0.8, 1.2),
                'process_load': np.random.uniform(0.3, 0.8)
            })
        
        return base_characteristics
    
    def _generate_building_consumption(self, 
                                     building: pd.Series,
                                     date_range: pd.DatetimeIndex,
                                     frequency: str) -> np.ndarray:
        """
        G√©n√®re la s√©rie de consommation pour un b√¢timent sp√©cifique.
        
        Args:
            building: Donn√©es du b√¢timent
            date_range: Plage temporelle
            frequency: Fr√©quence des donn√©es
            
        Returns:
            Array des valeurs de consommation
        """
        # Utiliser le g√©n√©rateur de patterns √©nerg√©tiques
        return self.pattern_generator.generate_consumption_pattern(
            building_type=building['building_class'],
            location=building['location'],
            date_range=date_range,
            frequency=frequency,
            characteristics=building.get('characteristics', {})
        )
    
    def _generate_unique_id(self) -> str:
        """G√©n√®re un identifiant unique de 16 caract√®res."""
        return uuid.uuid4().hex[:16]
    
    def _generate_building_id(self, location: Location, index: int) -> str:
        """
        G√©n√®re un ID de b√¢timent avec code g√©ographique.
        
        Args:
            location: Localisation
            index: Index du b√¢timent
            
        Returns:
            ID format√© (ex: MY_KUL_000123)
        """
        state_code = location.state_code if hasattr(location, 'state_code') else 'UNK'
        return f"MY_{state_code}_{index:06d}"
    
    def _generate_dataset_metadata(self, 
                                 buildings_df: pd.DataFrame,
                                 timeseries_df: pd.DataFrame,
                                 start_date: str,
                                 end_date: str,
                                 frequency: str) -> Dict:
        """
        G√©n√®re les m√©tadonn√©es du dataset g√©n√©r√©.
        
        Returns:
            Dictionnaire des m√©tadonn√©es
        """
        return {
            'dataset_name': 'malaysia_electricity_v3',
            'generation_timestamp': datetime.now().isoformat(),
            'generator_version': '3.0',
            'total_buildings': len(buildings_df),
            'total_observations': len(timeseries_df),
            'period': {
                'start_date': start_date,
                'end_date': end_date,
                'frequency': frequency,
                'total_days': (datetime.strptime(end_date, '%Y-%m-%d') - 
                              datetime.strptime(start_date, '%Y-%m-%d')).days
            },
            'geographic_coverage': {
                'country': 'Malaysia',
                'cities_included': buildings_df['location'].unique().tolist(),
                'states_included': buildings_df['state'].unique().tolist() if 'state' in buildings_df.columns else []
            },
            'building_distribution': buildings_df['building_class'].value_counts().to_dict(),
            'data_quality': {
                'completeness': 100.0,
                'null_values': 0,
                'outliers_detected': 0
            }
        }
    
    def get_generation_statistics(self) -> Dict:
        """
        Retourne les statistiques du g√©n√©rateur.
        
        Returns:
            Dictionnaire des statistiques
        """
        return {
            'total_locations': len(self.malaysia_data.get_available_locations()),
            'supported_building_types': self.malaysia_data.get_building_types(),
            'cache_size': {
                'locations': len(self._location_cache),
                'buildings': len(self._building_cache)
            },
            'configuration': {
                'timezone': 'Asia/Kuala_Lumpur',
                'currency': 'MYR',
                'energy_unit': 'kWh'
            }
        }


# Export de la classe principale
__all__ = ['ElectricityDataGenerator']